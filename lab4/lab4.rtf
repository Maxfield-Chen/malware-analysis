lab4a.malware
1. It's pushing a bunch of function calls into a register and then moving them onto the stack. At that address it's calling edx which is kernel32_GetProcAddress
2. Here it's calling kernel32_VirtualAlloc. This function is used to reserve big chunks of virtual memory, presumably to continue stealthily loading in other imports.
3. 
  -1360 is using some address in memory to call virtualAlloc and getProcAddress sneakily inside it's address space. 
  -1372 is also using virtualAlloc / getProcAddress, but this time it's being used for advapi32_RegCreateKeyA
  -1388 Same thing but this time with messageBoxA
4. 
  -kernel32_GetProcAddress
  -kernel32_VirtualAlloc
  -kernel32_GetModuleFileNameA
  -kernel32_ExitProcess
  -kernel32_CopyFileA
  -kernel32_GetWindowsDirectoryA
  -kernel32_LoadLibraryA
  -SetRegKeyA
  -RegCreateKeyA
  -RegCloseKeyA
  -MessageBoxA
5.
  -I let all the subroutines run and then...
  -I looked at the data in [ecx+4] and converted all relevant values into a double word.
6.
  -Sets a couple registry keys to autorun C:\Windows\virus.exe on startup and pops a message box saying Infected!.

lab4b.malware
*Note that for all my addresses, I used the old broken UPX verison.
1.004014B5 or 004013D6 depending on if you want the function which prints win or the function which checks if you meet the win condition.
2.
  First it takes the user input and perfoms a logical or on each character, the arguments of the or being the character shifted right by 4 and shifted left by 4. This has the effect of rotating the character left by 4.
  Then for each character in our rotated string, we iterate through {ga1F_1auTca_eht_t0n_s!_s1hT}galf and perform hex subtraction, subtracting our input from that string.
  Then for each character we xor this subtracted string with the rotation string.
  Finally we compare the result of the xor to a set of bytes in memory, modding around if we have more than the number of characters. If our string matches after these operations, than we print win.
3. 00404B58
4. Do all the steps in reverse order on the encrypted flag to get the plaintext: flag{Pra1se_th3_Sun!}.
