// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#include "guicon.h"
#include "detours.h"
#include <crtdbg.h>

#pragma comment( lib, "detours.lib" )

//Define a type for the guess function from static analysis
typedef int(__stdcall *GuessBoxType)(unsigned int, unsigned int);
//Define a type for the click function from static analysis
typedef int(__stdcall *ClickBoxType)(unsigned int, unsigned int);
//Define a type for the reDrawFunction from static analysis
typedef int(__stdcall *ReDrawType)(unsigned int, unsigned int, char);
//Define a type to hook clickBox
typedef int (WINAPI *pFunc)(unsigned int, unsigned int);
void WINAPI MyFunc(DWORD);
pFunc dClickBox = (pFunc)(0x01003512);
pFunc dincrementTimer = (pFunc)(0x01002FE0);
//Define a Thread ID for freezing the timer.

BOOL isMineBox(unsigned int x, unsigned int y) {
	y = (y << 5);
	unsigned int* boxArray = (unsigned int*)(0x01005340 + y + x);
	if ((BYTE)*boxArray == 0x8F || *boxArray == 142 || *boxArray == 143 || *boxArray == 128) {
		return TRUE;
	}
	else return FALSE;
}

BYTE getStoredSquare(unsigned int x, unsigned int y) {
	y = (y << 5);
	unsigned int* boxArray = (unsigned int*)(0x01005340 + y + x);
	return (BYTE)*boxArray;
}

void logLayout(unsigned int* boardWidth, unsigned int* boardHeight) {
	TCHAR pwd[MAX_PATH];
	GetCurrentDirectory(MAX_PATH, pwd);
	MessageBox(NULL, pwd, L"Your LayoutFile is Located in: ", 0);

	std::ofstream logFile;
	logFile.open("mineLayout.txt");
	if (logFile.fail()) {
		MessageBoxA(NULL, "Could not open layout file for writing", "ERROR", 0);
	}
	for (unsigned int h = 1; h <= *boardHeight; h++)
	{
		for (unsigned int w = 1; w <= *boardWidth; w++)
		{
			unsigned int curVal = getStoredSquare(w, h);
			if (curVal == 142) {
				logFile << "M";
			}
			else {
				logFile << (curVal - 64);
			}
		}
		logFile << "\n";
	}
	logFile.close();
}
void autoWin() {
	unsigned int* boardWidth = (unsigned int*)0x01005334;
	unsigned int* boardHeight = (unsigned int*)0x01005338;
	ClickBoxType ClickBox = (ClickBoxType)0x01003512;
	for (unsigned int w = 1; w <= *boardWidth; w++)
	{
		for (unsigned int h = 1; h <= *boardHeight; h++)
		{
			if (isMineBox(w, h) == false)
				ClickBox(w, h);
		}
	}
}

void reDrawMines() {
	unsigned int* boardWidth = (unsigned int*)0x01005334;
	unsigned int* boardHeight = (unsigned int*)0x01005338;
	ReDrawType reDraw = (ReDrawType)0x01002EAB;
	for (unsigned int w = 1; w <= *boardWidth; w++)
	{
		for (unsigned int h = 1; h <= *boardHeight; h++)
		{
			if (isMineBox(w, h) == TRUE)
				reDraw(w, h, 13);
		}
	}
}

int WINAPI hookClickBox(unsigned int w, unsigned int h) {
	ReDrawType reDraw = (ReDrawType)0x01002EAB;
	BYTE curVal = getStoredSquare(w, h);
	if (curVal == 128 || curVal == 9 || curVal == 137) {
		return reDraw(w, h, 13);
	}
	else {
		return dClickBox(w, h);
	}
}

void WINAPI hookFreeze(LPVOID setAs) {

}

void chooseOption() {
	if (MessageBoxA(NULL, "AUTOWIN?", "MineSpooper", MB_YESNO) == IDYES) {
		autoWin();
	}
	else if (MessageBoxA(NULL, "Extract Layout?", "MineSpooper", MB_YESNO) == IDYES) {
		//Init Values
		unsigned int* boardWidth = (unsigned int*)0x01005334;
		unsigned int* boardHeight = (unsigned int*)0x01005338;
		autoWin();
		logLayout(boardWidth, boardHeight);
	}
	else if (MessageBoxA(NULL, "Show Hidden Mines?", "MineSpooper", MB_YESNO) == IDYES) {
		reDrawMines();
	}
	else if (MessageBoxA(NULL, "Safe Mode? \n (No Death on Mines)", "MineSpooper", MB_YESNO) == IDYES) {
		DetourTransactionBegin();
		DetourUpdateThread(GetCurrentThread());
		DetourAttach(&(PVOID&)dClickBox, (PVOID)hookClickBox);
		DetourTransactionCommit();
	}
	else if (MessageBoxA(NULL, "Freeze Timer?", "MineSpooper", MB_YESNO) == IDYES) {
		DetourTransactionBegin();
		DetourUpdateThread(GetCurrentThread());
		DetourAttach(&(PVOID&)dincrementTimer, (PVOID)hookFreeze);
		DetourTransactionCommit();
	}
	if (MessageBoxA(NULL, "Another Hack Sir?", "MineSpooper", MB_YESNO) == IDYES) {
		chooseOption();
	}
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	{
		chooseOption();
		return true;
	}
	case DLL_PROCESS_DETACH:
	{
		DetourTransactionBegin();
		DetourUpdateThread(GetCurrentThread());
		DetourDetach(&(PVOID &)dClickBox, hookClickBox);
		DetourDetach(&(PVOID &)dClickBox, hookClickBox);
		DetourTransactionCommit();
	}
	default:
	{
		return false;
	}
	}
	MessageBoxA(NULL, "Thank you for using Minespooper.", "Enjoy your new job!", MB_OK);
}

